# from rational_linkages import DualQuaternion
# from python.legacy_classes.MechanismCollisions import MechanismCollisions
# from python.legacy_classes.MechanismPlotter import MechanismPlotter
#
# # MUST BE RUN in python console (because of live plot updates)
#
#
# # Prepare joint axis as dual quaternions
# def choose_mechanism(mech_type):
#     if mech_type == "4R":
#         h1 = DualQuaternion(
#             [-7 / 8, -41 / 18, 197 / 42, 116 / 3, 0, -113 / 7, 23 / 3, -79 / 42]
#         )
#         h2 = DualQuaternion(
#             [1 / 5, -139 / 66, 41 / 18, -67 / 22, 0, 161 / 15, 7 / 40, -175 / 24]
#         )
#         joints_h = [h1, h2]
#
#         k1 = DualQuaternion(
#             [
#                 1 / 5,
#                 5669544361883 / 2015216814798,
#                 -183226461553 / 61067176206,
#                 -945476516101 / 671738938266,
#                 0,
#                 -421299106940105883991058 / 52312389026005542777505,
#                 -5744732920786600763216039 / 1255497336624133026660120,
#                 -1592875918342578123941195 / 251099467324826605332024,
#             ]
#         )
#         k2 = DualQuaternion(
#             [
#                 -7 / 8,
#                 -439513005647 / 61067176206,
#                 12783919144091 / 1282410700326,
#                 376873207972 / 10177862701,
#                 0,
#                 580918770477598780857530 / 219712033909223279665521,
#                 129916037795673699282854 / 10462477805201108555501,
#                 -1243136717354215354109669 / 439424067818446559331042,
#             ]
#         )
#         joints_k = [k1, k2]
#
#         number_of_dofs = 1
#
#     elif mech_type == "6R":
#         h1 = DualQuaternion(
#             [-1 / 4, 13 / 5, -213 / 5, -68 / 15, 0, -52 / 3, -28 / 15, 38 / 5]
#         )
#         h2 = DualQuaternion(
#             [
#                 -3 / 10,
#                 833 / 240,
#                 -451 / 160,
#                 19 / 24,
#                 0,
#                 -427 / 480,
#                 -1609 / 720,
#                 -1217 / 300,
#             ]
#         )
#         h3 = DualQuaternion(
#             [9 / 4, -96 / 385, -3 / 11, 12 / 121, 0, -9 / 22, 18 / 77, -27 / 70]
#         )
#         joints_h = [h1, h2, h3]
#
#         k1 = DualQuaternion(
#             [
#                 9 / 4,
#                 -353293129020116088274366524 / 2046064697881244081606857985,
#                 71057440088136127923615537 / 292294956840177725943836855,
#                 -770841181127162033209449696 / 3215244525241954985382205405,
#                 0,
#                 1285925291840670577611498917452530201753024451488061
#                 / 3106776065243685802900593279235046876397736685683310,
#                 369908388252939453727221870302615264755351380922518
#                 / 10873716228352900310152076477322664067392078399891585,
#                 -521169721602430808498118610255124429182751294514817
#                 / 1977039314245981874573104814058666194071286981798470,
#             ]
#         )
#         k2 = DualQuaternion(
#             [
#                 -3 / 10,
#                 -1584906194063534950985110611269499455843766362303
#                 / 748589572249221191178253511800771099480289042160,
#                 -1920849060977583492916015219909062271715671063459
#                 / 499059714832814127452169007867180732986859361440,
#                 -86070495207833111808000603712957119046286563789
#                 / 74858957224922119117825351180077109948028904216,
#                 0,
#                 -1493945822997033838889866124648869571241092592593232647136782680036917092967587145383237343823
#                 / 933977246133786589561715243908633265522422939574517641472244621670941695011531052831617095776,
#                 -4383675369926674968359098051148186009275012265484280981512415092271834593351409097148552548873
#                 / 7004829346003399421712864329314749491418172046808882311041834662532062712586482896237128218320,
#                 4903731966877692899272930689015951377076396084948182642657351735217230221511376454058771819441
#                 / 972892964722694364126786712404826318252523895390122543200254814240564265637011513366267808100,
#             ]
#         )
#         k3 = DualQuaternion(
#             [
#                 -1 / 4,
#                 71409809286507251213549 / 8803698436759977863535,
#                 -24700620508978006448565 / 586913229117331857569,
#                 -1322302914772604754264 / 586913229117331857569,
#                 0,
#                 -6009699344068792249739386119282475891686296
#                 / 344467138512933679794546525402592102589761,
#                 -50778766896365492707380727887969151002044936
#                 / 15501021233082015590754593643116644616539245,
#                 -8366061133662094762021335484888717836156016
#                 / 5167007077694005196918197881038881538846415,
#             ]
#         )
#         joints_k = [k1, k2, k3]
#
#         number_of_dofs = 1
#
#     elif mech_type == "8R":
#         h1 = DualQuaternion([0, 2, -1, -3, 0, 23, -74, 40])
#         h2 = DualQuaternion([0, -1, 1, 0, 0, -11, -11, 2])
#         h3 = DualQuaternion([-6, -2, 3, -3, 0, -45, -66, -36])
#         h4 = DualQuaternion([0, 0, -1, 0, 0, -3, 0, -2])
#         joints_h = [h1, h2, h3, h4]
#         """
#         t - 2 * i + j + 3 * k + epsilon * (-23 * i + 74 * j - 40 * k)
#         s + i - j - epsilon * (-11 * i - 11 * j + 2 * k)
#         t + 2 * i - 3 * j + 3 * k + 6 + epsilon * (45 * i + 66 * j + 36 * k)
#         s + j - epsilon * (-3 * i - 2 * k)
#
#         s - (-25 * i + 2 * k) * epsilon â€“ j
#         (21 * i + 22 * j + 36 * k) * epsilon - 2 * i - 3 * j + 3 * k + t + 6
#         s - (11 * i - 11 * j - 2 * k) * epsilon + i + j
#         (i + 118 * j - 40 * k) * epsilon + 2 * i + j + 3 * k + t
#         """
#         k1 = DualQuaternion([0, 0, 1, 0, 0, -25, 0, 2])
#         k2 = DualQuaternion([-6, 2, 3, -3, 0, -21, -22, -36])
#         k3 = DualQuaternion([0, -1, -1, 0, 0, 11, -11, -2])
#         k4 = DualQuaternion([0, -2, -1, -3, 0, -1, -118, 40])
#         joints_k = [k1, k2, k3, k4]
#
#         number_of_dofs = 2
#
#     return MechanismCollisions(joints_h, joints_k, number_of_dofs)
#
#
# # Create mechanism, options are '4R', '6R' and '8R', while in 8R the size of plot
# # axes is not suitable and needs to be changed in MechanismPlotter.py
# m = choose_mechanism("6R")
#
# # Plot mechanism
# plot = MechanismPlotter(m)
