How to contribute
=================
This is a short guide on how to contribute to the project.

Writing documentation
~~~~~~~~~~~~~~~~~~~~~
Basic info on documentation of this package:

Modules documentation is autogenerated using Sphinx:

   - to generate documentation for testing purposes, run :code:`make html` in `docs` directory on your local machine
   - sometimes it is necessary to run :code:`make clean` before :code:`make html`, which basically deletes all the files in `docs/build` directory
   - to see the output, open `docs/build/html/index.html` in your browser
   - more info: https://www.sphinx-doc.org/en/master/usage/quickstart.html

Written in **reStructuredText (reST)** format:

   - info on PEP: https://peps.python.org/pep-0287/
   - quick guide: https://docutils.sourceforge.io/docs/user/rst/quickref.html
   - setup Pycharm to use reST: https://www.jetbrains.com/help/pycharm/settings-tools-python-integrated-tools.html

Every class/method/function should have a docstring that can contain following sections:

   - summary - short description of the method
   - description - longer description of the method
   - parameters - description of parameters
   - return - description of return values
   - rtype - type of return value
   - raises - description of exceptions that can be raised
   - warnings - warnings
   - examples - examples of usage
   - notes - additional notes
   - see also - references to other methods, classes, etc.
   - references - references to other methods, classes, etc.

**Additinally**, also the definiton of a class/method/function should contain the information what type of parameters it takes and what type of value it returns. Every class of function must have a unit test. The unit test are located in folder


Example of a docstring:

::

    def example_function(a: int, b: float) -> float:
        """
        One-line summary of the function.

        Multiline description of the function. For example, this function takes two
        parameters and returns their sum. See more in a paper by
        Authorsurname [#authorsurname2023]_.

        :param int a: description of parameter a
        :param float b: description of parameter b

        :return: description of return value
        :rtype: float or int

        :raises ValueError: if a is not an integer

        :warns b: if b is an integer, not a float

        :example:

        .. testcode::

            # General usage of a function, this section will be also included in doctest

            a = 1
            b = 2.0
            c = example_function(a, b)

        :note: additional notes

        :see also: :func:`example_function2`

        .. [#authorsurname2023] Authors, Title of the Source, *Journal Name*, Year,
            DOI: *number* (https://doi.org/*number*))
        """
        from warnings import warn

        if not isinstance(a, int):
            raise ValueError("a cannot be None")
        elif isinstance(b, int):
            warn("b is an integer, not a float")

        return a + b

